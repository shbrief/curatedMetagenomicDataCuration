name: Data for curatedMetagenomicData Curation by DOI


on:
  workflow_dispatch:
  issues:
    types: [opened] 

jobs:

  curation-comment:
    permissions:
      issues: write

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    container: bioconductor/bioconductor_docker:devel

    runs-on: ubuntu-latest

    outputs:
      author: ${{ steps.get-doi.outputs.AUTHOR }}
      year: ${{ steps.get-doi.outputs.YEAR }}

    steps:

      - name: Cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/lib/R/site-library
            /usr/local/lib/R/library
          key: ${{ runner.os }}-curatedmetagenomicdata-curation

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
         Rscript -e "install.packages(c('stringr', 'httr2'), repos = 'https://cloud.r-project.org', dependencies = c('Depends', 'Imports'))"

      - name: Get DOI
        id: get-doi
        run: |
          encodeQuotes <- function(s) {
            s <- stringr::str_replace_all(s, "'", "&apos;")
            s <- stringr::str_replace_all(s, '"', "&quot;")
            s
          }

          # https://stackoverflow.com/questions/17227294/removing-html-tags-from-a-string-in-r#answer-17227415
          cleanHtml <- function(s) {
            stringr::str_squish(gsub("(<.*?>|\n)", "", s))
          }

          encodeAndClean <- function(s) {
            cleanHtml(encodeQuotes(s))
          }

          doi <- ""
          comments <- stringr::str_split("${{ github.event.issue.body }}", "\n", simplify = TRUE)
          for (comment in comments) {
            doi <- stringr::str_squish(comment) |> stringr::str_extract("[0-9.]+/[A-Za-z0-9.-]+")
            if (!is.na(doi))
              break
          }

          crossref <- paste("https://api.crossref.org/works", doi, sep = "/")
          cr <- httr2::request(crossref) |>
            httr2::req_perform() |>
            httr2::resp_body_json(simplifyVector = TRUE)

          title <- ifelse("title" %in% names(cr$message),
            encodeAndClean(cr$message$title),
            "")

          year <- ifelse("published" %in% names(cr$message),
            cr$message$published$`date-parts`[1],
            "")

          journal <- ifelse("container-title" %in% names(cr$message),
            encodeAndClean(cr$message$`container-title`[[1]]),
            "")

          author <- ""
          if ('author' %in% names(cr$message)) {
            author <- paste(encodeAndClean(cr$message$author$given[1]),
                            encodeAndClean(cr$message$author$family[1]),
                            sep = " ")
          }

          source <- ifelse("resource" %in% names(cr$message),
                           encodeAndClean(cr$message$resource$primary$URL),
                           "")
          
          eutils <- paste0("https://eutils.ncbi.nlm.nih.gov/entrez/eutils/",
                           "esearch.fcgi?db=pubmed&term=",
                           doi, "[DOI]&retmode=json")
          
          er <- httr2::request(eutils) |>
            httr2::req_perform() |>
            httr2::resp_body_json(simplifyVector = TRUE)
          
          pmid <- ifelse(length(er$esearchresult$idlist) != 0,
                         er$esearchresult$idlist,
                         "NA")

          # Extract BioProject ID from issue body
          bioproject_id <- ""
          for (comment in comments) {
            bioproject_id <- stringr::str_squish(comment) |> stringr::str_extract("PRJ[A-Z]{2}[0-9]+")
            if (!is.na(bioproject_id))
              break
          }
          bioproject_id <- ifelse(is.na(bioproject_id), "NA", bioproject_id)

          system(paste0("echo DOI='https://doi.org/", doi, "' >> $GITHUB_OUTPUT"))
          system(paste0("echo AUTHOR='", author, "' >> $GITHUB_OUTPUT"))
          system(paste0("echo TITLE='", title, "' >> $GITHUB_OUTPUT"))
          system(paste0("echo JOURNAL='", journal, "' >> $GITHUB_OUTPUT"))
          system(paste0("echo YEAR=", year, " >> $GITHUB_OUTPUT"))
          system(paste0("echo PMID=", pmid, " >> $GITHUB_OUTPUT"))
          system(paste0("echo BIOPROJECT_ID='", bioproject_id, "' >> $GITHUB_OUTPUT"))

          print(paste("DOI:", doi, "PMID:", pmid, "TITLE:", title, "AUTHOR:", author, "JOURNAL:", journal, "YEAR:", year, "BIOPROJECT_ID:", bioproject_id))
        shell: Rscript {0}

      - uses: actions/github-script@v7
        if: steps.get-doi.outputs.DOI != ''
        with:
          script: |
            github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "[Study]: ${{ steps.get-doi.outputs.TITLE }}"
            })
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 
              `
              ### Title
              ${{ steps.get-doi.outputs.TITLE }}

              ### DOI
              ${{ steps.get-doi.outputs.DOI }}

              ### PMID
              ${{ steps.get-doi.outputs.PMID }}

              ### Author
              ${{ steps.get-doi.outputs.AUTHOR }}

              ### Journal
              ${{ steps.get-doi.outputs.JOURNAL }}

              ### Year
              ${{ steps.get-doi.outputs.YEAR }}

              ### BioProject ID
              ${{ steps.get-doi.outputs.BIOPROJECT_ID }}

              ðŸ‘‹ Thanks for submitting! Attempting to generate templates (may take a few minutes).
              `
            })

  create-templates:

    needs: curation-comment
    
    permissions:
      issues: write
      contents: write

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    container: bioconductor/bioconductor_docker:devel

    runs-on: ubuntu-latest

    steps:

      - name: Cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/lib/R/site-library
            /usr/local/lib/R/library
          key: ${{ runner.os }}-curatedmetagenomicdata-curation

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
         Rscript -e "install.packages('stringr'), repos = 'https://cloud.r-project.org', dependencies = c('Depends', 'Imports'))"

      - name: Checkout repository
        id: checkout-repository
        uses: actions/checkout@v4
 
      - name: Create templates
        id: create-templates
        run: |
          author <- "${{ needs.curation-comment.outputs.author }}"
          year <- "${{ needs.curation-comment.outputs.year }}"
          first_last <- unlist(strsplit(stringr::str_to_title(author), " "))
          first_name <- first_last[1]
          last_name <- first_last[length(first_last)]
          github_workspace <- Sys.getenv("GITHUB_WORKSPACE")
          BASE <- paste0(last_name, substr(first_name, 1, 1), "_", year)
          system(paste0("echo BASE=", BASE, " >> $GITHUB_OUTPUT"))
          full_path <- file.path(github_workspace, "inst/curated", BASE)
          if (!dir.exists(full_path)) {
              dir.create(full_path)
              study_df <- data.frame("Study Title" = character(),
                                     target_condition = character(),
                                     check.names = FALSE)
              write.table(study_df, sep = "\t", quote = FALSE,
                          file.path(full_path, paste0(BASE, "_study.tsv")))
              sample_df <- data.frame(study_name = character(),
                                      target_condition = character(),
                                      pmid = numeric(),
                                      doi = character(),
                                      check.names = FALSE)
              write.table(sample_df, sep = "\t", quote = FALSE,
                          file.path(full_path, paste0(BASE, "_sample.tsv")))
              system(paste0("echo CREATED='true' >> $GITHUB_OUTPUT"))
              system(paste0("echo MESSAGE='Success: Created' >> $GITHUB_OUTPUT"))
          } else {
              system(paste0("echo CREATED='false' >> $GITHUB_OUTPUT"))
              system(paste0("echo MESSAGE='Failure: Could not create' >> $GITHUB_OUTPUT"))
          }
        shell: Rscript {0}

      - name: Setup git config
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Commit templates
        if: ${{ steps.create-templates.outputs.CREATED == 'true' }}
        id: commit-templates
        run: |
          git add $GITHUB_WORKSPACE/inst/curated/${{ steps.create-templates.outputs.BASE }}/*.tsv
          git commit -m "Add ${{ steps.create-templates.outputs.BASE }}"
          git push origin ${{ github.event.repository.default_branch }}
 
      - uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 
              `
              ${{ steps.create-templates.outputs.MESSAGE }} ${{ steps.create-templates.outputs.BASE }}
              `
            })
